import { GridLogicOperator } from "@mui/x-data-grid-pro";
import { GridInitialStatePro } from "@mui/x-data-grid-pro/models/gridStatePro";

export const DEFAULT_PRESET: GridInitialStatePro = {
  pinnedColumns: { right: ["actions"] },
  columns: {
    columnVisibilityModel: {},
    orderedFields: [],
    dimensions: {},
  },
  preferencePanel: { open: false },
  filter: {
    filterModel: {
      items: [],
      logicOperator: GridLogicOperator.And,
      quickFilterValues: [],
      quickFilterLogicOperator: GridLogicOperator.And,
    },
  },
  density: "standard",
  pagination: {
    meta: {},
    rowCount: -1,
  },
  sorting: { sortModel: [] },
};

export const PRESET_ONE: GridInitialStatePro = {
  pinnedColumns: { right: ["actions"] },
  columns: {
    columnVisibilityModel: {
      b2bUsername: false,
      operatorUsername: false,
      partnerName: false,
      status: false,
      internalReferenceNo: false,
      winnerPercentage: false,
      playerRank: false,
      prizeValue: false,
      openingTOTBalance: false,
      closingTOTBalance: false,
      registeredDate: false,
      dateRange: false,
      time: false,
      timeRange: false,
    },
    orderedFields: [
      "tournamentId",
      "tournamentName",
      "b2bUsername",
      "operatorUsername",
      "partnerName",
      "status",
      "internalReferenceNo",
      "playerRank",
      "winnerPercentage",
      "prizeValue",
      "openingTOTBalance",
      "closingTOTBalance",
      "registeredDate",
      "dateRange",
      "time",
      "timeRange",
      "coinName",
      "ticketStatusStr",
      "botId",
      "button",
      "flag",
      "actions",
    ],
    dimensions: {
      tournamentId: { maxWidth: -1, minWidth: 50, width: 118 },
      tournamentName: { maxWidth: -1, minWidth: 50, width: 145 },
      b2bUsername: { maxWidth: -1, minWidth: 200, width: 206.515625 },
      operatorUsername: { maxWidth: -1, minWidth: 50, width: 150 },
      partnerName: { maxWidth: -1, minWidth: 50, width: 122.9296875 },
      status: { maxWidth: -1, minWidth: 200, width: 200 },
      internalReferenceNo: { maxWidth: -1, minWidth: 50, width: 213.375 },
      playerRank: { maxWidth: -1, minWidth: 200, width: 200 },
      winnerPercentage: { maxWidth: -1, minWidth: 200, width: 200 },
      prizeValue: { maxWidth: -1, minWidth: 200, width: 200 },
      openingTOTBalance: { maxWidth: -1, minWidth: 200, width: 200 },
      closingTOTBalance: { maxWidth: -1, minWidth: 200, width: 200 },
      registeredDate: { maxWidth: -1, minWidth: 180, width: 180 },
      dateRange: { maxWidth: -1, minWidth: 280, width: 280 },
      time: { maxWidth: -1, minWidth: 230, width: 230 },
      timeRange: { maxWidth: -1, minWidth: 400, width: 400 },
      coinName: { maxWidth: -1, minWidth: 200, width: 200 },
      ticketStatusStr: { maxWidth: -1, minWidth: 200, width: 200 },
      botId: { maxWidth: -1, minWidth: 200, width: 200 },
      button: { maxWidth: -1, minWidth: 80, width: 78.984375 },
      flag: { maxWidth: -1, minWidth: 60, width: 60 },
      actions: { maxWidth: -1, minWidth: 50, width: 50 },
    },
  },
  preferencePanel: { open: false },
  filter: {
    filterModel: {
      items: [
        { field: "coinName", operator: "is", id: 95905, value: "Bitcoin" },
      ],
      logicOperator: GridLogicOperator.And,
      quickFilterValues: [],
      quickFilterLogicOperator: GridLogicOperator.And,
    },
  },
  density: "standard",
  pagination: {
    meta: {},
    rowCount: -1,
    paginationModel: { pageSize: 12, page: 0 },
  },
  sorting: { sortModel: [{ field: "ticketStatusStr", sort: "desc" }] },
};
